# comandos para ver as rotas configuradas nos roteadores
# docker exec router1 vtysh -c 'show ip route'
# docker exec router2 vtysh -c 'show ip route'
# docker exec router3 vtysh -c 'show ip route'
# Definindo as redes customizadas com configuração de IPAM

# comando para dar permissões
# sudo chown -R raildom:raildom ./router/frr_configs
# sudo chmod -R u+rw ./router/frr_configs
networks:
  lan1:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
  lan2:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.2.0/24
  lan3:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.3.0/24
  lan4:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.4.0/24

# Definindo os serviços (containers)
services:
  # Roteadores com FRR (RIP)
  router1:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router1
    hostname: router1
    privileged: true
    volumes:
      - ./router/frr_configs/router1:/etc/frr
    networks:
      lan1:
        ipv4_address: 192.168.1.2
    command: >
      bash -c "
        echo 'Habilitando encaminhamento IP em router1...' && \
        sysctl -w net.ipv4.ip_forward=1 && \
        echo 'Criando diretórios FRR e ajustando permissões em router1...' && \
        mkdir -p /var/log/frr /var/run/frr && \
        chown frr:frr /var/log/frr && \
        chown frr:frrvty /var/run/frr && \
        touch /etc/frr/zebra.conf /etc/frr/ripd.conf && \
        chown frr:frr /etc/frr/*.conf && \
        chmod 640 /etc/frr/*.conf && \
        echo 'Configurando /etc/hosts em router1...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Iniciando daemons FRR (zebra e ripd) em router1...' && \
        /usr/lib/frr/zebra -d -f /etc/frr/zebra.conf && \
        /usr/lib/frr/ripd -d -f /etc/frr/ripd.conf && \
        echo 'Configuração de router1 concluída. Mantendo container ativo.' && \
        tail -f /dev/null
      "

  router2:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router2
    hostname: router2
    privileged: true
    volumes:
      - ./router/frr_configs/router2:/etc/frr
    networks:
      lan1:
        ipv4_address: 192.168.1.3
      lan2:
        ipv4_address: 192.168.2.2
      lan3:
        ipv4_address: 192.168.3.2
    command: >
      bash -c "
        echo 'Habilitando encaminhamento IP em router2...' && \
        sysctl -w net.ipv4.ip_forward=1 && \
        echo 'Criando diretórios FRR e ajustando permissões em router2...' && \
        mkdir -p /var/log/frr /var/run/frr && \
        chown frr:frr /var/log/frr && \
        chown frr:frrvty /var/run/frr && \
        touch /etc/frr/zebra.conf /etc/frr/ripd.conf && \
        chown frr:frr /etc/frr/*.conf && \
        chmod 640 /etc/frr/*.conf && \
        echo 'Configurando /etc/hosts em router2...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Iniciando daemons FRR (zebra e ripd) em router2...' && \
        /usr/lib/frr/zebra -d -f /etc/frr/zebra.conf && \
        /usr/lib/frr/ripd -d -f /etc/frr/ripd.conf && \
        echo 'Configuração de router2 concluída. Mantendo container ativo.' && \
        tail -f /dev/null
      "

  router3:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router3
    hostname: router3
    privileged: true
    volumes:
      - ./router/frr_configs/router3:/etc/frr
    networks:
      lan1:
        ipv4_address: 192.168.1.4
      lan3:
        ipv4_address: 192.168.3.3
      lan4:
        ipv4_address: 192.168.4.2
    command: >
      bash -c "
        echo 'Habilitando encaminhamento IP em router3...' && \
        sysctl -w net.ipv4.ip_forward=1 && \
        echo 'Criando diretórios FRR e ajustando permissões em router3...' && \
        mkdir -p /var/log/frr /var/run/frr && \
        chown frr:frr /var/log/frr && \
        chown frr:frrvty /var/run/frr && \
        touch /etc/frr/zebra.conf /etc/frr/ripd.conf && \
        chown frr:frr /etc/frr/*.conf && \
        chmod 640 /etc/frr/*.conf && \
        echo 'Configurando /etc/hosts em router3...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Iniciando daemons FRR (zebra e ripd) em router3...' && \
        /usr/lib/frr/zebra -d -f /etc/frr/zebra.conf && \
        /usr/lib/frr/ripd -d -f /etc/frr/ripd.conf && \
        echo 'Configuração de router3 concluída. Mantendo container ativo.' && \
        tail -f /dev/null
      "

  # Hosts (mantidos como na Questão 04, gateway já configurado)
  host1:
    build:
      context: ./host
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: host1
    hostname: host1
    depends_on:
      - router2
    networks:
      lan2:
        ipv4_address: 192.168.2.10
    command: >
      bash -c "
        echo 'Configurando gateway padrão em host1...' && \
        ip route replace default via 192.168.2.2 && \
        echo 'Configurando /etc/hosts em host1...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Configuração de host1 concluída. Mantendo container ativo.' && \
        tail -f /dev/null
      "

  host2:
    build:
      context: ./host
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: host2
    hostname: host2
    depends_on:
      - router2
    networks:
      lan3:
        ipv4_address: 192.168.3.10
    command: >
      bash -c "
        echo 'Configurando gateway padrão em host2...' && \
        ip route replace default via 192.168.3.2 && \
        echo 'Configurando /etc/hosts em host2...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Configuração de host2 concluída. Mantendo container ativo.' && \
        tail -f /dev/null
      "

  host3:
    build:
      context: ./host
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: host3
    hostname: host3
    depends_on:
      - router3
    networks:
      lan4:
        ipv4_address: 192.168.4.10
    command: >
      bash -c "
        echo 'Configurando gateway padrão em host3...' && \
        ip route replace default via 192.168.4.2 && \
        echo 'Configurando /etc/hosts em host3...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Configuração de host3 concluída. Mantendo container ativo.' && \
        tail -f /dev/null
      "

  # Servidores Web (mantidos como na Questão 04, gateway já configurado)
  web1:
    build:
      context: ./web1
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: web1
    hostname: www1.empresa.com
    depends_on:
      - router2
    networks:
      lan2:
        ipv4_address: 192.168.2.100
    ports:
      - "8081:80"
    command: >
      bash -c "
        echo 'Configurando gateway padrão em web1...' && \
        ip route replace default via 192.168.2.2 && \
        echo 'Configurando /etc/hosts em web1...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Iniciando servidor Nginx...' && \
        nginx -g 'daemon off;'
      "

  web2:
    build:
      context: ./web2
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: web2
    hostname: www2.empresa.com
    depends_on:
      - router2
    networks:
      lan3:
        ipv4_address: 192.168.3.100
    ports:
      - "8082:80"
    command: >
      bash -c "
        echo 'Configurando gateway padrão em web2...' && \
        ip route replace default via 192.168.3.2 && \
        echo 'Configurando /etc/hosts em web2...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Iniciando servidor Nginx...' && \
        nginx -g 'daemon off;'
      "

  web3:
    build:
      context: ./web3
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: web3
    hostname: www3.empresa.com
    depends_on:
      - router3
    networks:
      lan4:
        ipv4_address: 192.168.4.100
    ports:
      - "8083:80"
    command: >
      bash -c "
        echo 'Configurando gateway padrão em web3...' && \
        ip route replace default via 192.168.4.2 && \
        echo 'Configurando /etc/hosts em web3...' && \
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts && \
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts && \
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts && \
        echo 'Iniciando servidor Nginx...' && \
        nginx -g 'daemon off;'
      "