# Definindo as redes customizadas com configuração de IPAM
networks:
  lan1:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
  lan2:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.2.0/24
  lan3:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.3.0/24
  lan4:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.4.0/24

# Definindo os serviços (containers)
services:
  # Roteadores
  router1:
    build: 
      context: ./router
      dockerfile: Dockerfile
    container_name: router1
    hostname: router1
    privileged: true
    networks:
      lan1:
        ipv4_address: 192.168.1.2
    command: >
      bash -c "
        echo 'Habilitando encaminhamento IP em router1...' &&
        sysctl -w net.ipv4.ip_forward=1 &&
        echo 'Adicionando rotas estáticas em router1...' &&
        ip route add 192.168.2.0/24 via 192.168.1.3 && #
        ip route add 192.168.3.0/24 via 192.168.1.3 &&
        ip route add 192.168.4.0/24 via 192.168.1.4 &&
        echo 'Configurando /etc/hosts em router1...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Configuração de router1 concluída. Mantendo container ativo.' &&
        tail -f /dev/null
      "

  router2:
    build: 
      context: ./router
      dockerfile: Dockerfile
    container_name: router2
    hostname: router2
    privileged: true
    networks:
      lan1:
        ipv4_address: 192.168.1.3
      lan2:
        ipv4_address: 192.168.2.2
      lan3:
        ipv4_address: 192.168.3.2
    command: >
      bash -c "
        echo 'Habilitando encaminhamento IP em router2...' &&
        sysctl -w net.ipv4.ip_forward=1 &&
        echo 'Adicionando rotas estáticas em router2...' &&
        ip route add 192.168.4.0/24 via 192.168.3.3 &&
        echo 'Configurando /etc/hosts em router2...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Configuração de router2 concluída. Mantendo container ativo.' &&
        tail -f /dev/null
      "

  router3:
    build: 
      context: ./router
      dockerfile: Dockerfile
    container_name: router3
    hostname: router3
    privileged: true
    networks:
      lan1:
        ipv4_address: 192.168.1.4
      lan3:
        ipv4_address: 192.168.3.3
      lan4:
        ipv4_address: 192.168.4.2
    command: >
      bash -c "
        echo 'Habilitando encaminhamento IP em router3...' &&
        sysctl -w net.ipv4.ip_forward=1 &&
        echo 'Adicionando rotas estáticas em router3...' &&
        ip route add 192.168.2.0/24 via 192.168.3.2 &&
        echo 'Configurando /etc/hosts em router3...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Configuração de router3 concluída. Mantendo container ativo.' &&
        tail -f /dev/null
      "

  # Hosts
  host1:
    build: 
      context: ./host
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: host1
    hostname: host1
    depends_on:
      - router2
    networks:
      lan2:
        ipv4_address: 192.168.2.10
    command: >
      bash -c "
        echo 'Configurando gateway padrão em host1...' &&
        ip route replace default via 192.168.2.2 && #
        echo 'Configurando /etc/hosts em host1...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Configuração de host1 concluída. Mantendo container ativo.' &&
        tail -f /dev/null
      "

  host2:
    build: 
      context: ./host
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: host2
    hostname: host2
    depends_on:
      - router2
    networks:
      lan3:
        ipv4_address: 192.168.3.10
    command: >
      bash -c "
        echo 'Configurando gateway padrão em host2...' &&
        ip route replace default via 192.168.3.2 && #
        echo 'Configurando /etc/hosts em host2...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Configuração de host2 concluída. Mantendo container ativo.' &&
        tail -f /dev/null
      "

  host3:
    build: 
      context: ./host
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: host3
    hostname: host3
    depends_on:
      - router3
    networks:
      lan4:
        ipv4_address: 192.168.4.10
    command: >
      bash -c "
        echo 'Configurando gateway padrão em host3...' &&
        ip route replace default via 192.168.4.2 && #
        echo 'Configurando /etc/hosts em host3...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Configuração de host3 concluída. Mantendo container ativo.' &&
        tail -f /dev/null
      "

  # Servidores Web
  web1:
    build: 
      context: ./web1
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: web1
    hostname: www1.empresa.com
    depends_on:
      - router2
    networks:
      lan2:
        ipv4_address: 192.168.2.100
    ports:
      - "8081:80"
    command: >
      bash -c "
        echo 'Configurando gateway padrão em web1...' &&
        ip route replace default via 192.168.2.2 && #
        echo 'Configurando /etc/hosts em web1...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Iniciando servidor Nginx...' &&
        nginx -g 'daemon off;'
      "

  web2:
    build: 
      context: ./web2
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: web2
    hostname: www2.empresa.com
    depends_on:
      - router2
    networks:
      lan3:
        ipv4_address: 192.168.3.100
    ports:
      - "8082:80"
    command: >
      bash -c "
        echo 'Configurando gateway padrão em web2...' &&
        ip route replace default via 192.168.3.2 && #
        echo 'Configurando /etc/hosts em web2...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Iniciando servidor Nginx...' &&
        nginx -g 'daemon off;'
      "

  web3:
    build: 
      context: ./web3
      dockerfile: Dockerfile
    cap_add:
      - NET_ADMIN
    container_name: web3
    hostname: www3.empresa.com
    depends_on:
      - router3
    networks:
      lan4:
        ipv4_address: 192.168.4.100
    ports:
      - "8083:80"
    command: >
      bash -c "
        echo 'Configurando gateway padrão em web3...' &&
        ip route replace default via 192.168.4.2 && #
        echo 'Configurando /etc/hosts em web3...' &&
        echo '192.168.2.100 www1.empresa.com' >> /etc/hosts &&
        echo '192.168.3.100 www2.empresa.com' >> /etc/hosts &&
        echo '192.168.4.100 www3.empresa.com' >> /etc/hosts &&
        echo 'Iniciando servidor Nginx...' &&
        nginx -g 'daemon off;'
      "
